@model UnitusCore.Controllers.PasswordInputRequest

@{
    ViewBag.Title = "パスワードリセット";
    Layout = "~/Views/_BaseLayout.cshtml";
}
@section Header{
    <link href="/Content/Styles/Login.css" rel="stylesheet">
}

<div class="table">
    <div class="table-cell">
        <div class="login-container">
            <img class="login-logo" src="/Content/logo.png" />
            <h1 class="login-header">パスワードの再発行</h1>
            <p>新しく設定するパスワードを打ち込んでください。</p>

            @using (Html.BeginForm("ForgotPasswordConfirmSave", "Account", FormMethod.Post, new { @class = "login-form" }))
            {
                @Html.AntiForgeryToken()
                @Html.Hidden("confirmId", Model.confirmId)
                <input type="password" name="Password" class="form-control" placeholder="パスワード" />
                <input type="password" name="PasswordConfirmation" class="form-control" placeholder="パスワードの確認" />
                <input type="submit" value="送信" class="form-control btn btn-primary" />
            }
            @if (Model.ErrorMessage != null && !string.IsNullOrWhiteSpace(Model.ErrorMessage))
            {
                <p class="bg-danger">@(Model.ErrorMessage)</p>
            }
        </div>
    </div>
</div>

<script>
    /* 二つのパスワードが一緒かつ強いパスなら押せる
     * 一つ目にしか入ってないなら押せないがアラートなし
     * 二つがパスワードが一緒でない又は強いパスでなければ押せなくてアラート

     */

    $(function () {

        "use strict";
        var p = console.log.bind(console);

        var isMatch = function (pass1, pass2) {
            return pass1 === pass2;
        }

        var isStrong = (function () {

            function hasCommon(ary1, ary2) {
                return ary1.some(function (e1) {
                    return ary2.some(function (e2) {
                        return e1 === e2;
                    });
                });
            }

            function enoughLength(ary, len) {
                return ary.length >= len;
            }

            return function (password) {
                var pass = password.split("");
                var lower = "qwertyuiopasdfghjklzxcvbnm".split("");
                var upper = "QWERTYUIOPASDFGHJKLZXCVBNM".split("");

                var strength =
                    hasCommon(pass, lower) && // 小文字がある
                    hasCommon(pass, upper) && // 大文字がある
                    enoughLength(pass, 8);    // 8文字以上

                return strength;
            }
        })();

        var validity = function (pass1, pass2) {
            return isMatch(pass1, pass2) && isStrong(pass1);
        }

        var onesideInput = function (pass1, pass2) {
            return !pass2.length; // pass2が0のときpass1だけ入力されてるから真
        }

        var hasError = function () { // "既に今まで"でエラーがあるかどうか
            return !!$('.login-container p.bg-danger').text();
        }

        var showMessage = function (msg) {
            if (hasError()) {
                $('.login-container p.bg-danger').html(msg);
            } else {
                $('.login-container').append(
                    '<p class="bg-danger">' + msg + '</p>'
                );
            }
        }

        var errorCause = function (pass1, pass2) {
            var error = [];

            if (!isMatch(pass1, pass2))
                error.push("パスワードが一致していません");
            if (!isStrong(pass1))
                error.push("パスワードは８文字以上でアルファベットの大文字小文字を含んでいる必要があります");

            return (error || []).join("<br>");
        }

        var submittable = function (ok) {
            ok? $('input[type="submit"]').removeAttr('disabled')
              : $('input[type="submit"]').attr('disabled', 'disabled');
        }


        var initializeError = hasError(); 
        if (initializeError) return; // トークン処理とかで既におかしかったら何もしない

        $('input[name^="Password"]').keyup(function () {
            var pass1 = $('input[name="Password"]').val();
            var pass2 = $('input[name="PasswordConfirmation"]').val();

            if (onesideInput(pass1, pass2)) {
                $('.login-container p.bg-danger').remove();
                submittable(false);
            } else if (!validity(pass1, pass2)) {
                var msg = errorCause(pass1, pass2);
                showMessage(msg);
                submittable(false);
            } else {
                $('.login-container p.bg-danger').remove();
                submittable(true);
            }
            
        });
    });
</script>